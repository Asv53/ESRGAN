2023-08-18 21:11:07,632 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 2.0.1+cu117
	TorchVision: 0.15.2+cu117
2023-08-18 21:11:07,632 INFO: 
  name: 002_RRDBNet_PSNR_x4_f64b25_SET14_10k_B16G1_wandb
  model_type: SRModel
  scale: 4
  num_gpu: 1
  manual_seed: 0
  datasets:[
    train:[
      name: SET14
      type: PairedImageDataset
      dataroot_gt: datasets/Set14/GTmod12_sub
      dataroot_lq: datasets/Set14/LRbicx4_sub
      filename_tmpl: {}
      io_backend:[
        type: disk
      ]
      gt_size: 128
      use_hflip: True
      use_rot: True
      num_worker_per_gpu: 6
      batch_size_per_gpu: 16
      dataset_enlarge_ratio: 100
      prefetch_mode: None
      phase: train
      scale: 4
    ]
    val:[
      name: Set5
      type: PairedImageDataset
      dataroot_gt: datasets/Set5/GTmod12
      dataroot_lq: datasets/Set5/LRbicx4
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
  ]
  path:[
    pretrain_network_g: None
    strict_load_g: True
    resume_state: None
    experiments_root: D:\miniproject\zips\BasicSR\experiments\002_RRDBNet_PSNR_x4_f64b25_SET14_10k_B16G1_wandb
    models: D:\miniproject\zips\BasicSR\experiments\002_RRDBNet_PSNR_x4_f64b25_SET14_10k_B16G1_wandb\models
    training_states: D:\miniproject\zips\BasicSR\experiments\002_RRDBNet_PSNR_x4_f64b25_SET14_10k_B16G1_wandb\training_states
    log: D:\miniproject\zips\BasicSR\experiments\002_RRDBNet_PSNR_x4_f64b25_SET14_10k_B16G1_wandb
    visualization: D:\miniproject\zips\BasicSR\experiments\002_RRDBNet_PSNR_x4_f64b25_SET14_10k_B16G1_wandb\visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0002
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: CosineAnnealingRestartLR
      periods: [250000, 250000, 250000, 250000]
      restart_weights: [1, 1, 1, 1]
      eta_min: 1e-07
    ]
    total_iter: 10000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
  ]
  val:[
    val_freq: 500.0
    save_img: False
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 4
        test_y_channel: False
      ]
    ]
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 500.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: False
  is_train: True
  root_path: D:\miniproject\zips\BasicSR

2023-08-18 21:11:07,788 INFO: Dataset [PairedImageDataset] - SET14 is built.
2023-08-18 21:11:07,788 INFO: Training statistics:
	Number of train images: 32
	Dataset enlarge ratio: 100
	Batch size per gpu: 16
	World size (gpu number): 1
	Require iter number per epoch: 200
	Total epochs: 50; iters: 10000.
2023-08-18 21:11:07,804 INFO: Dataset [PairedImageDataset] - Set5 is built.
2023-08-18 21:11:07,804 INFO: Number of val images/folders in Set5: 5
2023-08-18 21:11:08,007 INFO: Network [RRDBNet] is created.
2023-08-18 21:11:09,212 INFO: Network: RRDBNet, with parameters: 16,697,987
2023-08-18 21:11:09,212 INFO: RRDBNet(
  (conv_first): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2023-08-18 21:11:09,228 INFO: Use Exponential Moving Average with decay: 0.999
2023-08-18 21:11:09,431 INFO: Network [RRDBNet] is created.
2023-08-18 21:11:10,057 INFO: Loss [L1Loss] is created.
2023-08-18 21:11:10,072 INFO: Model [SRModel] is created.
2023-08-18 21:11:10,432 INFO: Start training from epoch: 0, iter: 0
2023-08-18 21:13:59,877 INFO: [002_R..][epoch:  0, iter:     100, lr:(2.000e-04,)] [eta: 4:15:29, time (data): 1.694 (0.064)] l_pix: 5.2316e-02 
2023-08-18 21:16:36,596 INFO: [002_R..][epoch:  0, iter:     200, lr:(2.000e-04,)] [eta: 4:14:25, time (data): 1.631 (0.032)] l_pix: 6.1509e-02 
2023-08-18 21:19:20,602 INFO: [002_R..][epoch:  1, iter:     300, lr:(2.000e-04,)] [eta: 4:16:14, time (data): 1.569 (0.001)] l_pix: 3.5780e-02 
2023-08-18 21:21:57,769 INFO: [002_R..][epoch:  1, iter:     400, lr:(2.000e-04,)] [eta: 4:13:03, time (data): 1.571 (0.001)] l_pix: 3.9454e-02 
2023-08-18 21:24:38,927 INFO: [002_R..][epoch:  2, iter:     500, lr:(2.000e-04,)] [eta: 4:11:21, time (data): 1.569 (0.000)] l_pix: 4.2411e-02 
2023-08-18 21:24:38,927 INFO: Saving models and training states.
2023-08-18 21:24:44,179 INFO: Validation Set5
	 # psnr: 16.3863	Best: 16.3863 @ 500 iter

2023-08-18 21:27:11,410 INFO: [002_R..][epoch:  2, iter:     600, lr:(2.000e-04,)] [eta: 4:07:04, time (data): 1.520 (0.001)] l_pix: 4.5910e-02 
2023-08-18 21:29:43,257 INFO: [002_R..][epoch:  3, iter:     700, lr:(2.000e-04,)] [eta: 4:03:09, time (data): 1.475 (0.001)] l_pix: 4.1570e-02 
2023-08-18 21:32:10,673 INFO: [002_R..][epoch:  3, iter:     800, lr:(2.000e-04,)] [eta: 3:58:43, time (data): 1.474 (0.001)] l_pix: 3.8847e-02 
2023-08-18 21:34:42,228 INFO: [002_R..][epoch:  4, iter:     900, lr:(2.000e-04,)] [eta: 3:55:25, time (data): 1.473 (0.001)] l_pix: 3.5970e-02 
2023-08-18 21:37:09,674 INFO: [002_R..][epoch:  4, iter:   1,000, lr:(2.000e-04,)] [eta: 3:51:40, time (data): 1.474 (0.001)] l_pix: 4.4446e-02 
2023-08-18 21:37:09,674 INFO: Saving models and training states.
2023-08-18 21:37:11,974 INFO: Validation Set5
	 # psnr: 20.6407	Best: 20.6407 @ 1000 iter

2023-08-18 21:39:44,746 INFO: [002_R..][epoch:  5, iter:   1,100, lr:(2.000e-04,)] [eta: 3:49:10, time (data): 1.483 (0.001)] l_pix: 3.5355e-02 
2023-08-18 21:42:12,489 INFO: [002_R..][epoch:  5, iter:   1,200, lr:(2.000e-04,)] [eta: 3:45:46, time (data): 1.480 (0.001)] l_pix: 2.9688e-02 
2023-08-18 21:44:44,529 INFO: [002_R..][epoch:  6, iter:   1,300, lr:(2.000e-04,)] [eta: 3:42:59, time (data): 1.479 (0.000)] l_pix: 2.8888e-02 
2023-08-18 21:47:12,361 INFO: [002_R..][epoch:  6, iter:   1,400, lr:(2.000e-04,)] [eta: 3:39:49, time (data): 1.479 (0.001)] l_pix: 3.6874e-02 
2023-08-18 21:49:44,008 INFO: [002_R..][epoch:  7, iter:   1,500, lr:(2.000e-04,)] [eta: 3:37:06, time (data): 1.474 (0.001)] l_pix: 3.5932e-02 
2023-08-18 21:49:44,008 INFO: Saving models and training states.
2023-08-18 21:49:46,197 INFO: Validation Set5
	 # psnr: 23.6842	Best: 23.6842 @ 1500 iter

2023-08-18 21:52:14,000 INFO: [002_R..][epoch:  7, iter:   1,600, lr:(2.000e-04,)] [eta: 3:34:15, time (data): 1.476 (0.001)] l_pix: 2.7320e-02 
2023-08-18 21:54:45,763 INFO: [002_R..][epoch:  8, iter:   1,700, lr:(2.000e-04,)] [eta: 3:31:36, time (data): 1.477 (0.001)] l_pix: 3.3137e-02 
2023-08-18 21:57:13,152 INFO: [002_R..][epoch:  8, iter:   1,800, lr:(2.000e-04,)] [eta: 3:28:37, time (data): 1.475 (0.001)] l_pix: 2.7771e-02 
2023-08-18 21:59:44,889 INFO: [002_R..][epoch:  9, iter:   1,900, lr:(2.000e-04,)] [eta: 3:26:01, time (data): 1.476 (0.001)] l_pix: 4.4991e-02 
2023-08-18 22:02:12,563 INFO: [002_R..][epoch:  9, iter:   2,000, lr:(2.000e-04,)] [eta: 3:23:08, time (data): 1.476 (0.001)] l_pix: 3.8288e-02 
2023-08-18 22:02:12,563 INFO: Saving models and training states.
2023-08-18 22:02:14,928 INFO: Validation Set5
	 # psnr: 25.4999	Best: 25.4999 @ 2000 iter

2023-08-18 22:04:47,326 INFO: [002_R..][epoch: 10, iter:   2,100, lr:(2.000e-04,)] [eta: 3:20:45, time (data): 1.480 (0.001)] l_pix: 3.1962e-02 
2023-08-18 22:07:15,226 INFO: [002_R..][epoch: 10, iter:   2,200, lr:(2.000e-04,)] [eta: 3:17:56, time (data): 1.479 (0.001)] l_pix: 3.7697e-02 
2023-08-18 22:09:47,299 INFO: [002_R..][epoch: 11, iter:   2,300, lr:(2.000e-04,)] [eta: 3:15:23, time (data): 1.478 (0.002)] l_pix: 3.1487e-02 
2023-08-18 22:12:15,103 INFO: [002_R..][epoch: 11, iter:   2,400, lr:(2.000e-04,)] [eta: 3:12:37, time (data): 1.478 (0.001)] l_pix: 3.3712e-02 
2023-08-18 22:14:46,756 INFO: [002_R..][epoch: 12, iter:   2,500, lr:(2.000e-04,)] [eta: 3:10:03, time (data): 1.475 (0.001)] l_pix: 2.9596e-02 
2023-08-18 22:14:46,756 INFO: Saving models and training states.
2023-08-18 22:14:48,882 INFO: Validation Set5
	 # psnr: 26.6725	Best: 26.6725 @ 2500 iter

2023-08-18 22:17:16,979 INFO: [002_R..][epoch: 12, iter:   2,600, lr:(1.999e-04,)] [eta: 3:07:26, time (data): 1.478 (0.001)] l_pix: 2.7706e-02 
2023-08-18 22:19:49,100 INFO: [002_R..][epoch: 13, iter:   2,700, lr:(1.999e-04,)] [eta: 3:04:54, time (data): 1.475 (0.000)] l_pix: 2.9190e-02 
2023-08-18 22:22:16,888 INFO: [002_R..][epoch: 13, iter:   2,800, lr:(1.999e-04,)] [eta: 3:02:11, time (data): 1.477 (0.001)] l_pix: 3.3087e-02 
2023-08-18 22:24:48,310 INFO: [002_R..][epoch: 14, iter:   2,900, lr:(1.999e-04,)] [eta: 2:59:38, time (data): 1.474 (0.001)] l_pix: 3.3700e-02 
2023-08-18 22:27:15,747 INFO: [002_R..][epoch: 14, iter:   3,000, lr:(1.999e-04,)] [eta: 2:56:56, time (data): 1.474 (0.001)] l_pix: 3.1566e-02 
2023-08-18 22:27:15,747 INFO: Saving models and training states.
2023-08-18 22:27:18,061 INFO: Validation Set5
	 # psnr: 27.4849	Best: 27.4849 @ 3000 iter

2023-08-18 22:29:50,107 INFO: [002_R..][epoch: 15, iter:   3,100, lr:(1.999e-04,)] [eta: 2:54:31, time (data): 1.478 (0.001)] l_pix: 2.6037e-02 
2023-08-18 22:32:17,998 INFO: [002_R..][epoch: 15, iter:   3,200, lr:(1.999e-04,)] [eta: 2:51:51, time (data): 1.479 (0.001)] l_pix: 2.9533e-02 
2023-08-18 22:34:50,115 INFO: [002_R..][epoch: 16, iter:   3,300, lr:(1.999e-04,)] [eta: 2:49:20, time (data): 1.480 (0.001)] l_pix: 3.5088e-02 
2023-08-18 22:37:17,704 INFO: [002_R..][epoch: 16, iter:   3,400, lr:(1.999e-04,)] [eta: 2:46:40, time (data): 1.478 (0.001)] l_pix: 3.1298e-02 
2023-08-18 22:39:49,610 INFO: [002_R..][epoch: 17, iter:   3,500, lr:(1.999e-04,)] [eta: 2:44:09, time (data): 1.476 (0.001)] l_pix: 3.4872e-02 
2023-08-18 22:39:49,610 INFO: Saving models and training states.
2023-08-18 22:39:51,830 INFO: Validation Set5
	 # psnr: 28.0120	Best: 28.0120 @ 3500 iter

2023-08-18 22:42:19,723 INFO: [002_R..][epoch: 17, iter:   3,600, lr:(1.999e-04,)] [eta: 2:41:35, time (data): 1.478 (0.001)] l_pix: 3.2843e-02 
2023-08-18 22:44:51,956 INFO: [002_R..][epoch: 18, iter:   3,700, lr:(1.999e-04,)] [eta: 2:39:05, time (data): 1.479 (0.001)] l_pix: 3.2373e-02 
2023-08-18 22:47:19,598 INFO: [002_R..][epoch: 18, iter:   3,800, lr:(1.999e-04,)] [eta: 2:36:27, time (data): 1.477 (0.001)] l_pix: 2.7392e-02 
2023-08-18 22:49:51,310 INFO: [002_R..][epoch: 19, iter:   3,900, lr:(1.999e-04,)] [eta: 2:33:56, time (data): 1.475 (0.001)] l_pix: 3.0591e-02 
2023-08-18 22:52:18,913 INFO: [002_R..][epoch: 19, iter:   4,000, lr:(1.999e-04,)] [eta: 2:31:19, time (data): 1.475 (0.001)] l_pix: 3.4005e-02 
2023-08-18 22:52:18,913 INFO: Saving models and training states.
2023-08-18 22:52:21,338 INFO: Validation Set5
	 # psnr: 28.3590	Best: 28.3590 @ 4000 iter

2023-08-18 22:54:53,481 INFO: [002_R..][epoch: 20, iter:   4,100, lr:(1.999e-04,)] [eta: 2:28:52, time (data): 1.476 (0.001)] l_pix: 2.7534e-02 
2023-08-18 22:57:21,013 INFO: [002_R..][epoch: 20, iter:   4,200, lr:(1.999e-04,)] [eta: 2:26:15, time (data): 1.476 (0.001)] l_pix: 3.4919e-02 
2023-08-18 22:59:52,741 INFO: [002_R..][epoch: 21, iter:   4,300, lr:(1.999e-04,)] [eta: 2:23:45, time (data): 1.477 (0.000)] l_pix: 2.7605e-02 
2023-08-18 23:02:20,072 INFO: [002_R..][epoch: 21, iter:   4,400, lr:(1.998e-04,)] [eta: 2:21:08, time (data): 1.475 (0.001)] l_pix: 2.6653e-02 
2023-08-18 23:04:51,686 INFO: [002_R..][epoch: 22, iter:   4,500, lr:(1.998e-04,)] [eta: 2:18:37, time (data): 1.475 (0.000)] l_pix: 2.7586e-02 
2023-08-18 23:04:51,686 INFO: Saving models and training states.
2023-08-18 23:04:53,938 INFO: Validation Set5
	 # psnr: 28.6330	Best: 28.6330 @ 4500 iter

2023-08-18 23:07:21,341 INFO: [002_R..][epoch: 22, iter:   4,600, lr:(1.998e-04,)] [eta: 2:16:04, time (data): 1.474 (0.000)] l_pix: 2.6604e-02 
2023-08-18 23:09:52,816 INFO: [002_R..][epoch: 23, iter:   4,700, lr:(1.998e-04,)] [eta: 2:13:33, time (data): 1.474 (0.001)] l_pix: 3.6840e-02 
2023-08-18 23:12:20,124 INFO: [002_R..][epoch: 23, iter:   4,800, lr:(1.998e-04,)] [eta: 2:10:58, time (data): 1.473 (0.001)] l_pix: 2.7725e-02 
2023-08-18 23:14:51,596 INFO: [002_R..][epoch: 24, iter:   4,900, lr:(1.998e-04,)] [eta: 2:08:27, time (data): 1.473 (0.001)] l_pix: 3.2839e-02 
2023-08-18 23:17:18,996 INFO: [002_R..][epoch: 24, iter:   5,000, lr:(1.998e-04,)] [eta: 2:05:52, time (data): 1.474 (0.001)] l_pix: 2.7529e-02 
2023-08-18 23:17:18,996 INFO: Saving models and training states.
2023-08-18 23:17:21,280 INFO: Validation Set5
	 # psnr: 28.8388	Best: 28.8388 @ 5000 iter

2023-08-18 23:19:52,789 INFO: [002_R..][epoch: 25, iter:   5,100, lr:(1.998e-04,)] [eta: 2:03:24, time (data): 1.473 (0.002)] l_pix: 3.4658e-02 
2023-08-18 23:22:19,961 INFO: [002_R..][epoch: 25, iter:   5,200, lr:(1.998e-04,)] [eta: 2:00:49, time (data): 1.472 (0.002)] l_pix: 2.8429e-02 
2023-08-18 23:24:51,591 INFO: [002_R..][epoch: 26, iter:   5,300, lr:(1.998e-04,)] [eta: 1:58:18, time (data): 1.474 (0.001)] l_pix: 3.7600e-02 
2023-08-18 23:27:18,750 INFO: [002_R..][epoch: 26, iter:   5,400, lr:(1.998e-04,)] [eta: 1:55:44, time (data): 1.473 (0.002)] l_pix: 2.7099e-02 
2023-08-18 23:29:50,023 INFO: [002_R..][epoch: 27, iter:   5,500, lr:(1.998e-04,)] [eta: 1:53:13, time (data): 1.472 (0.001)] l_pix: 2.7522e-02 
2023-08-18 23:29:50,508 INFO: Saving models and training states.
2023-08-18 23:29:52,149 INFO: Validation Set5
	 # psnr: 28.9784	Best: 28.9784 @ 5500 iter

2023-08-18 23:32:19,718 INFO: [002_R..][epoch: 27, iter:   5,600, lr:(1.998e-04,)] [eta: 1:50:41, time (data): 1.474 (0.001)] l_pix: 2.4329e-02 
2023-08-18 23:34:51,514 INFO: [002_R..][epoch: 28, iter:   5,700, lr:(1.997e-04,)] [eta: 1:48:11, time (data): 1.480 (0.001)] l_pix: 2.5192e-02 
2023-08-18 23:37:18,908 INFO: [002_R..][epoch: 28, iter:   5,800, lr:(1.997e-04,)] [eta: 1:45:37, time (data): 1.476 (0.001)] l_pix: 2.6701e-02 
2023-08-18 23:39:50,682 INFO: [002_R..][epoch: 29, iter:   5,900, lr:(1.997e-04,)] [eta: 1:43:07, time (data): 1.478 (0.001)] l_pix: 2.5631e-02 
2023-08-18 23:42:18,261 INFO: [002_R..][epoch: 29, iter:   6,000, lr:(1.997e-04,)] [eta: 1:40:34, time (data): 1.477 (0.001)] l_pix: 3.1302e-02 
2023-08-18 23:42:18,261 INFO: Saving models and training states.
2023-08-18 23:42:20,435 INFO: Validation Set5
	 # psnr: 29.0946	Best: 29.0946 @ 6000 iter

2023-08-18 23:44:52,176 INFO: [002_R..][epoch: 30, iter:   6,100, lr:(1.997e-04,)] [eta: 1:38:05, time (data): 1.473 (0.000)] l_pix: 2.2250e-02 
2023-08-18 23:47:19,570 INFO: [002_R..][epoch: 30, iter:   6,200, lr:(1.997e-04,)] [eta: 1:35:31, time (data): 1.474 (0.001)] l_pix: 2.9690e-02 
2023-08-18 23:49:51,287 INFO: [002_R..][epoch: 31, iter:   6,300, lr:(1.997e-04,)] [eta: 1:33:01, time (data): 1.475 (0.000)] l_pix: 3.1074e-02 
2023-08-18 23:52:18,618 INFO: [002_R..][epoch: 31, iter:   6,400, lr:(1.997e-04,)] [eta: 1:30:28, time (data): 1.474 (0.000)] l_pix: 3.0367e-02 
2023-08-18 23:54:50,114 INFO: [002_R..][epoch: 32, iter:   6,500, lr:(1.997e-04,)] [eta: 1:27:58, time (data): 1.473 (0.002)] l_pix: 2.0091e-02 
2023-08-18 23:54:50,129 INFO: Saving models and training states.
2023-08-18 23:54:52,178 INFO: Validation Set5
	 # psnr: 29.1763	Best: 29.1763 @ 6500 iter

2023-08-18 23:57:19,825 INFO: [002_R..][epoch: 32, iter:   6,600, lr:(1.997e-04,)] [eta: 1:25:26, time (data): 1.475 (0.001)] l_pix: 2.2485e-02 
2023-08-18 23:59:51,388 INFO: [002_R..][epoch: 33, iter:   6,700, lr:(1.996e-04,)] [eta: 1:22:56, time (data): 1.473 (0.001)] l_pix: 2.6634e-02 
2023-08-19 00:02:18,653 INFO: [002_R..][epoch: 33, iter:   6,800, lr:(1.996e-04,)] [eta: 1:20:23, time (data): 1.473 (0.001)] l_pix: 2.4965e-02 
2023-08-19 00:04:50,200 INFO: [002_R..][epoch: 34, iter:   6,900, lr:(1.996e-04,)] [eta: 1:17:53, time (data): 1.474 (0.001)] l_pix: 2.6597e-02 
2023-08-19 00:07:17,589 INFO: [002_R..][epoch: 34, iter:   7,000, lr:(1.996e-04,)] [eta: 1:15:21, time (data): 1.474 (0.001)] l_pix: 2.8418e-02 
2023-08-19 00:07:17,589 INFO: Saving models and training states.
2023-08-19 00:07:19,669 INFO: Validation Set5
	 # psnr: 29.2457	Best: 29.2457 @ 7000 iter

2023-08-19 00:09:51,499 INFO: [002_R..][epoch: 35, iter:   7,100, lr:(1.996e-04,)] [eta: 1:12:51, time (data): 1.472 (0.002)] l_pix: 2.9418e-02 
2023-08-19 00:12:18,578 INFO: [002_R..][epoch: 35, iter:   7,200, lr:(1.996e-04,)] [eta: 1:10:19, time (data): 1.471 (0.001)] l_pix: 3.0233e-02 
2023-08-19 00:14:49,909 INFO: [002_R..][epoch: 36, iter:   7,300, lr:(1.996e-04,)] [eta: 1:07:48, time (data): 1.473 (0.000)] l_pix: 2.9049e-02 
2023-08-19 00:17:16,947 INFO: [002_R..][epoch: 36, iter:   7,400, lr:(1.996e-04,)] [eta: 1:05:16, time (data): 1.471 (0.001)] l_pix: 3.5192e-02 
2023-08-19 00:19:48,446 INFO: [002_R..][epoch: 37, iter:   7,500, lr:(1.996e-04,)] [eta: 1:02:46, time (data): 1.473 (0.001)] l_pix: 2.8246e-02 
2023-08-19 00:19:48,446 INFO: Saving models and training states.
2023-08-19 00:19:50,588 INFO: Validation Set5
	 # psnr: 29.3033	Best: 29.3033 @ 7500 iter

2023-08-19 00:22:17,835 INFO: [002_R..][epoch: 37, iter:   7,600, lr:(1.995e-04,)] [eta: 1:00:15, time (data): 1.473 (0.001)] l_pix: 2.4520e-02 
2023-08-19 00:24:49,578 INFO: [002_R..][epoch: 38, iter:   7,700, lr:(1.995e-04,)] [eta: 0:57:44, time (data): 1.472 (0.001)] l_pix: 3.0160e-02 
2023-08-19 00:27:16,636 INFO: [002_R..][epoch: 38, iter:   7,800, lr:(1.995e-04,)] [eta: 0:55:13, time (data): 1.471 (0.001)] l_pix: 2.9114e-02 
2023-08-19 00:29:48,249 INFO: [002_R..][epoch: 39, iter:   7,900, lr:(1.995e-04,)] [eta: 0:52:42, time (data): 1.475 (0.001)] l_pix: 2.6841e-02 
2023-08-19 00:32:15,895 INFO: [002_R..][epoch: 39, iter:   8,000, lr:(1.995e-04,)] [eta: 0:50:11, time (data): 1.476 (0.001)] l_pix: 2.6408e-02 
2023-08-19 00:32:15,895 INFO: Saving models and training states.
2023-08-19 00:32:18,193 INFO: Validation Set5
	 # psnr: 29.3517	Best: 29.3517 @ 8000 iter

2023-08-19 00:34:50,082 INFO: [002_R..][epoch: 40, iter:   8,100, lr:(1.995e-04,)] [eta: 0:47:41, time (data): 1.470 (0.003)] l_pix: 2.6076e-02 
2023-08-19 00:37:17,280 INFO: [002_R..][epoch: 40, iter:   8,200, lr:(1.995e-04,)] [eta: 0:45:09, time (data): 1.471 (0.002)] l_pix: 3.0731e-02 
2023-08-19 00:39:48,291 INFO: [002_R..][epoch: 41, iter:   8,300, lr:(1.995e-04,)] [eta: 0:42:39, time (data): 1.471 (0.001)] l_pix: 2.6199e-02 
2023-08-19 00:42:15,488 INFO: [002_R..][epoch: 41, iter:   8,400, lr:(1.994e-04,)] [eta: 0:40:08, time (data): 1.472 (0.001)] l_pix: 2.7661e-02 
2023-08-19 00:44:46,887 INFO: [002_R..][epoch: 42, iter:   8,500, lr:(1.994e-04,)] [eta: 0:37:37, time (data): 1.474 (0.001)] l_pix: 3.0696e-02 
2023-08-19 00:44:46,887 INFO: Saving models and training states.
2023-08-19 00:44:49,015 INFO: Validation Set5
	 # psnr: 29.3895	Best: 29.3895 @ 8500 iter

2023-08-19 00:47:16,464 INFO: [002_R..][epoch: 42, iter:   8,600, lr:(1.994e-04,)] [eta: 0:35:06, time (data): 1.474 (0.001)] l_pix: 2.5247e-02 
2023-08-19 00:49:47,934 INFO: [002_R..][epoch: 43, iter:   8,700, lr:(1.994e-04,)] [eta: 0:32:36, time (data): 1.472 (0.001)] l_pix: 2.6822e-02 
2023-08-19 00:52:15,230 INFO: [002_R..][epoch: 43, iter:   8,800, lr:(1.994e-04,)] [eta: 0:30:05, time (data): 1.472 (0.001)] l_pix: 2.9243e-02 
2023-08-19 00:54:46,391 INFO: [002_R..][epoch: 44, iter:   8,900, lr:(1.994e-04,)] [eta: 0:27:34, time (data): 1.472 (0.000)] l_pix: 2.0306e-02 
2023-08-19 00:57:13,482 INFO: [002_R..][epoch: 44, iter:   9,000, lr:(1.994e-04,)] [eta: 0:25:03, time (data): 1.471 (0.001)] l_pix: 3.3952e-02 
2023-08-19 00:57:13,482 INFO: Saving models and training states.
2023-08-19 00:57:15,749 INFO: Validation Set5
	 # psnr: 29.4234	Best: 29.4234 @ 9000 iter

2023-08-19 00:59:47,366 INFO: [002_R..][epoch: 45, iter:   9,100, lr:(1.993e-04,)] [eta: 0:22:33, time (data): 1.473 (0.002)] l_pix: 2.8274e-02 
2023-08-19 01:02:14,691 INFO: [002_R..][epoch: 45, iter:   9,200, lr:(1.993e-04,)] [eta: 0:20:02, time (data): 1.473 (0.001)] l_pix: 2.4965e-02 
2023-08-19 01:04:46,139 INFO: [002_R..][epoch: 46, iter:   9,300, lr:(1.993e-04,)] [eta: 0:17:32, time (data): 1.472 (0.001)] l_pix: 2.2244e-02 
2023-08-19 01:07:13,230 INFO: [002_R..][epoch: 46, iter:   9,400, lr:(1.993e-04,)] [eta: 0:15:01, time (data): 1.471 (0.001)] l_pix: 2.7478e-02 
2023-08-19 01:09:44,441 INFO: [002_R..][epoch: 47, iter:   9,500, lr:(1.993e-04,)] [eta: 0:12:31, time (data): 1.469 (0.001)] l_pix: 2.7121e-02 
2023-08-19 01:09:44,441 INFO: Saving models and training states.
2023-08-19 01:09:46,833 INFO: Validation Set5
	 # psnr: 29.4357	Best: 29.4357 @ 9500 iter

2023-08-19 01:12:14,147 INFO: [002_R..][epoch: 47, iter:   9,600, lr:(1.993e-04,)] [eta: 0:10:00, time (data): 1.472 (0.001)] l_pix: 2.7085e-02 
2023-08-19 01:14:45,411 INFO: [002_R..][epoch: 48, iter:   9,700, lr:(1.993e-04,)] [eta: 0:07:30, time (data): 1.472 (0.002)] l_pix: 3.0663e-02 
2023-08-19 01:17:12,637 INFO: [002_R..][epoch: 48, iter:   9,800, lr:(1.992e-04,)] [eta: 0:04:59, time (data): 1.472 (0.001)] l_pix: 2.8019e-02 
2023-08-19 01:19:44,022 INFO: [002_R..][epoch: 49, iter:   9,900, lr:(1.992e-04,)] [eta: 0:02:28, time (data): 1.471 (0.001)] l_pix: 2.6177e-02 
2023-08-19 01:22:11,314 INFO: [002_R..][epoch: 49, iter:  10,000, lr:(1.992e-04,)] [eta: -1 day, 23:59:59, time (data): 1.472 (0.001)] l_pix: 2.6045e-02 
2023-08-19 01:22:11,314 INFO: Saving models and training states.
2023-08-19 01:22:13,566 INFO: Validation Set5
	 # psnr: 29.4424	Best: 29.4424 @ 10000 iter

2023-08-19 01:22:17,803 INFO: End of training. Time consumed: 4:11:07
2023-08-19 01:22:17,803 INFO: Save the latest model.
2023-08-19 01:22:20,069 INFO: Validation Set5
	 # psnr: 29.4424	Best: 29.4424 @ 10001 iter

