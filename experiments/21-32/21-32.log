2023-08-19 02:33:52,671 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 2.0.1+cu117
	TorchVision: 0.15.2+cu117
2023-08-19 02:33:52,671 INFO: 
  name: 003_RRDBNet_PSNR_x4_f64b21_SET14_10k_B16G1_wandb
  model_type: SRModel
  scale: 4
  num_gpu: 1
  manual_seed: 0
  datasets:[
    train:[
      name: SET14
      type: PairedImageDataset
      dataroot_gt: datasets/Set14/GTmod12_sub
      dataroot_lq: datasets/Set14/LRbicx4_sub
      filename_tmpl: {}
      io_backend:[
        type: disk
      ]
      gt_size: 128
      use_hflip: True
      use_rot: True
      num_worker_per_gpu: 6
      batch_size_per_gpu: 16
      dataset_enlarge_ratio: 100
      prefetch_mode: None
      phase: train
      scale: 4
    ]
    val:[
      name: Set5
      type: PairedImageDataset
      dataroot_gt: datasets/Set5/GTmod12
      dataroot_lq: datasets/Set5/LRbicx4
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 21
    num_grow_ch: 32
  ]
  path:[
    pretrain_network_g: None
    strict_load_g: True
    resume_state: None
    experiments_root: D:\miniproject\zips\BasicSR\experiments\003_RRDBNet_PSNR_x4_f64b21_SET14_10k_B16G1_wandb
    models: D:\miniproject\zips\BasicSR\experiments\003_RRDBNet_PSNR_x4_f64b21_SET14_10k_B16G1_wandb\models
    training_states: D:\miniproject\zips\BasicSR\experiments\003_RRDBNet_PSNR_x4_f64b21_SET14_10k_B16G1_wandb\training_states
    log: D:\miniproject\zips\BasicSR\experiments\003_RRDBNet_PSNR_x4_f64b21_SET14_10k_B16G1_wandb
    visualization: D:\miniproject\zips\BasicSR\experiments\003_RRDBNet_PSNR_x4_f64b21_SET14_10k_B16G1_wandb\visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0002
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: CosineAnnealingRestartLR
      periods: [250000, 250000, 250000, 250000]
      restart_weights: [1, 1, 1, 1]
      eta_min: 1e-07
    ]
    total_iter: 10000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
  ]
  val:[
    val_freq: 500.0
    save_img: False
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 4
        test_y_channel: False
      ]
    ]
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 500.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: False
  is_train: True
  root_path: D:\miniproject\zips\BasicSR

2023-08-19 02:33:52,765 INFO: Dataset [PairedImageDataset] - SET14 is built.
2023-08-19 02:33:52,765 INFO: Training statistics:
	Number of train images: 32
	Dataset enlarge ratio: 100
	Batch size per gpu: 16
	World size (gpu number): 1
	Require iter number per epoch: 200
	Total epochs: 50; iters: 10000.
2023-08-19 02:33:52,765 INFO: Dataset [PairedImageDataset] - Set5 is built.
2023-08-19 02:33:52,765 INFO: Number of val images/folders in Set5: 5
2023-08-19 02:33:52,983 INFO: Network [RRDBNet] is created.
2023-08-19 02:33:54,145 INFO: Network: RRDBNet, with parameters: 15,259,139
2023-08-19 02:33:54,145 INFO: RRDBNet(
  (conv_first): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2023-08-19 02:33:54,161 INFO: Use Exponential Moving Average with decay: 0.999
2023-08-19 02:33:54,349 INFO: Network [RRDBNet] is created.
2023-08-19 02:33:55,725 INFO: Loss [L1Loss] is created.
2023-08-19 02:33:55,725 INFO: Model [SRModel] is created.
2023-08-19 02:33:56,069 INFO: Start training from epoch: 0, iter: 0
2023-08-19 02:35:19,129 INFO: [003_R..][epoch:  0, iter:     100, lr:(2.000e-04,)] [eta: 1:55:10, time (data): 0.831 (0.067)] l_pix: 5.5328e-02 
2023-08-19 02:36:30,755 INFO: [003_R..][epoch:  0, iter:     200, lr:(2.000e-04,)] [eta: 1:55:29, time (data): 0.773 (0.034)] l_pix: 6.4505e-02 
2023-08-19 02:37:46,557 INFO: [003_R..][epoch:  1, iter:     300, lr:(2.000e-04,)] [eta: 1:57:02, time (data): 0.716 (0.001)] l_pix: 3.8016e-02 
2023-08-19 02:38:58,053 INFO: [003_R..][epoch:  1, iter:     400, lr:(2.000e-04,)] [eta: 1:55:28, time (data): 0.716 (0.001)] l_pix: 4.4019e-02 
2023-08-19 02:40:14,278 INFO: [003_R..][epoch:  2, iter:     500, lr:(2.000e-04,)] [eta: 1:55:32, time (data): 0.722 (0.001)] l_pix: 4.5083e-02 
2023-08-19 02:40:14,293 INFO: Saving models and training states.
2023-08-19 02:40:19,773 INFO: Validation Set5
	 # psnr: 16.5408	Best: 16.5408 @ 500 iter

2023-08-19 02:41:32,869 INFO: [003_R..][epoch:  2, iter:     600, lr:(2.000e-04,)] [eta: 1:55:47, time (data): 0.726 (0.001)] l_pix: 4.6799e-02 
2023-08-19 02:42:48,765 INFO: [003_R..][epoch:  3, iter:     700, lr:(2.000e-04,)] [eta: 1:54:59, time (data): 0.718 (0.001)] l_pix: 3.2243e-02 
2023-08-19 02:44:00,941 INFO: [003_R..][epoch:  3, iter:     800, lr:(2.000e-04,)] [eta: 1:53:22, time (data): 0.720 (0.001)] l_pix: 4.2068e-02 
2023-08-19 02:45:16,909 INFO: [003_R..][epoch:  4, iter:     900, lr:(2.000e-04,)] [eta: 1:52:28, time (data): 0.717 (0.000)] l_pix: 3.7645e-02 
2023-08-19 02:46:28,726 INFO: [003_R..][epoch:  4, iter:   1,000, lr:(2.000e-04,)] [eta: 1:50:53, time (data): 0.718 (0.001)] l_pix: 4.5257e-02 
2023-08-19 02:46:28,726 INFO: Saving models and training states.
2023-08-19 02:46:31,009 INFO: Validation Set5
	 # psnr: 21.8112	Best: 21.8112 @ 1000 iter

2023-08-19 02:47:47,647 INFO: [003_R..][epoch:  5, iter:   1,100, lr:(2.000e-04,)] [eta: 1:50:19, time (data): 0.723 (0.001)] l_pix: 3.4436e-02 
2023-08-19 02:48:59,556 INFO: [003_R..][epoch:  5, iter:   1,200, lr:(2.000e-04,)] [eta: 1:48:47, time (data): 0.721 (0.001)] l_pix: 3.0964e-02 
2023-08-19 02:50:15,973 INFO: [003_R..][epoch:  6, iter:   1,300, lr:(2.000e-04,)] [eta: 1:47:48, time (data): 0.722 (0.001)] l_pix: 2.8835e-02 
2023-08-19 02:51:28,415 INFO: [003_R..][epoch:  6, iter:   1,400, lr:(2.000e-04,)] [eta: 1:46:21, time (data): 0.723 (0.001)] l_pix: 3.5015e-02 
2023-08-19 02:52:44,707 INFO: [003_R..][epoch:  7, iter:   1,500, lr:(2.000e-04,)] [eta: 1:45:19, time (data): 0.718 (0.001)] l_pix: 3.6663e-02 
2023-08-19 02:52:44,707 INFO: Saving models and training states.
2023-08-19 02:52:46,646 INFO: Validation Set5
	 # psnr: 24.6830	Best: 24.6830 @ 1500 iter

2023-08-19 02:53:59,149 INFO: [003_R..][epoch:  7, iter:   1,600, lr:(2.000e-04,)] [eta: 1:44:05, time (data): 0.722 (0.001)] l_pix: 2.8040e-02 
2023-08-19 02:55:15,572 INFO: [003_R..][epoch:  8, iter:   1,700, lr:(2.000e-04,)] [eta: 1:43:01, time (data): 0.722 (0.002)] l_pix: 3.3340e-02 
2023-08-19 02:56:27,544 INFO: [003_R..][epoch:  8, iter:   1,800, lr:(2.000e-04,)] [eta: 1:41:35, time (data): 0.721 (0.001)] l_pix: 3.2960e-02 
2023-08-19 02:57:43,692 INFO: [003_R..][epoch:  9, iter:   1,900, lr:(2.000e-04,)] [eta: 1:40:28, time (data): 0.719 (0.002)] l_pix: 3.3140e-02 
2023-08-19 02:58:55,886 INFO: [003_R..][epoch:  9, iter:   2,000, lr:(2.000e-04,)] [eta: 1:39:05, time (data): 0.721 (0.001)] l_pix: 3.9077e-02 
2023-08-19 02:58:55,886 INFO: Saving models and training states.
2023-08-19 02:58:57,919 INFO: Validation Set5
	 # psnr: 25.8869	Best: 25.8869 @ 2000 iter

2023-08-19 03:00:15,678 INFO: [003_R..][epoch: 10, iter:   2,100, lr:(2.000e-04,)] [eta: 1:38:11, time (data): 0.736 (0.001)] l_pix: 3.2729e-02 
2023-08-19 03:01:28,184 INFO: [003_R..][epoch: 10, iter:   2,200, lr:(2.000e-04,)] [eta: 1:36:49, time (data): 0.730 (0.001)] l_pix: 3.5213e-02 
2023-08-19 03:02:44,737 INFO: [003_R..][epoch: 11, iter:   2,300, lr:(2.000e-04,)] [eta: 1:35:42, time (data): 0.724 (0.001)] l_pix: 3.1983e-02 
2023-08-19 03:03:57,193 INFO: [003_R..][epoch: 11, iter:   2,400, lr:(2.000e-04,)] [eta: 1:34:20, time (data): 0.724 (0.001)] l_pix: 3.4747e-02 
2023-08-19 03:05:13,935 INFO: [003_R..][epoch: 12, iter:   2,500, lr:(2.000e-04,)] [eta: 1:33:12, time (data): 0.723 (0.001)] l_pix: 2.9807e-02 
2023-08-19 03:05:13,935 INFO: Saving models and training states.
2023-08-19 03:05:16,280 INFO: Validation Set5
	 # psnr: 26.4297	Best: 26.4297 @ 2500 iter

2023-08-19 03:06:29,146 INFO: [003_R..][epoch: 12, iter:   2,600, lr:(1.999e-04,)] [eta: 1:32:00, time (data): 0.726 (0.001)] l_pix: 2.6745e-02 
2023-08-19 03:07:45,529 INFO: [003_R..][epoch: 13, iter:   2,700, lr:(1.999e-04,)] [eta: 1:30:50, time (data): 0.719 (0.002)] l_pix: 3.1001e-02 
2023-08-19 03:08:57,749 INFO: [003_R..][epoch: 13, iter:   2,800, lr:(1.999e-04,)] [eta: 1:29:29, time (data): 0.721 (0.002)] l_pix: 3.4238e-02 
2023-08-19 03:10:14,574 INFO: [003_R..][epoch: 14, iter:   2,900, lr:(1.999e-04,)] [eta: 1:28:20, time (data): 0.725 (0.001)] l_pix: 3.3919e-02 
2023-08-19 03:11:27,242 INFO: [003_R..][epoch: 14, iter:   3,000, lr:(1.999e-04,)] [eta: 1:27:00, time (data): 0.726 (0.001)] l_pix: 3.1870e-02 
2023-08-19 03:11:27,242 INFO: Saving models and training states.
2023-08-19 03:11:29,744 INFO: Validation Set5
	 # psnr: 26.8410	Best: 26.8410 @ 3000 iter

2023-08-19 03:12:46,064 INFO: [003_R..][epoch: 15, iter:   3,100, lr:(1.999e-04,)] [eta: 1:25:55, time (data): 0.721 (0.000)] l_pix: 2.5521e-02 
2023-08-19 03:13:58,038 INFO: [003_R..][epoch: 15, iter:   3,200, lr:(1.999e-04,)] [eta: 1:24:35, time (data): 0.720 (0.001)] l_pix: 3.0024e-02 
2023-08-19 03:15:14,361 INFO: [003_R..][epoch: 16, iter:   3,300, lr:(1.999e-04,)] [eta: 1:23:23, time (data): 0.721 (0.001)] l_pix: 3.2921e-02 
2023-08-19 03:16:26,353 INFO: [003_R..][epoch: 16, iter:   3,400, lr:(1.999e-04,)] [eta: 1:22:03, time (data): 0.720 (0.001)] l_pix: 3.1334e-02 
2023-08-19 03:17:42,958 INFO: [003_R..][epoch: 17, iter:   3,500, lr:(1.999e-04,)] [eta: 1:20:53, time (data): 0.723 (0.001)] l_pix: 3.3215e-02 
2023-08-19 03:17:42,958 INFO: Saving models and training states.
2023-08-19 03:17:45,037 INFO: Validation Set5
	 # psnr: 27.3083	Best: 27.3083 @ 3500 iter

2023-08-19 03:18:57,675 INFO: [003_R..][epoch: 17, iter:   3,600, lr:(1.999e-04,)] [eta: 1:19:38, time (data): 0.725 (0.001)] l_pix: 3.2687e-02 
2023-08-19 03:20:14,128 INFO: [003_R..][epoch: 18, iter:   3,700, lr:(1.999e-04,)] [eta: 1:18:26, time (data): 0.721 (0.001)] l_pix: 2.9672e-02 
2023-08-19 03:21:26,420 INFO: [003_R..][epoch: 18, iter:   3,800, lr:(1.999e-04,)] [eta: 1:17:08, time (data): 0.722 (0.001)] l_pix: 2.8396e-02 
2023-08-19 03:22:42,838 INFO: [003_R..][epoch: 19, iter:   3,900, lr:(1.999e-04,)] [eta: 1:15:56, time (data): 0.722 (0.001)] l_pix: 3.5793e-02 
2023-08-19 03:23:55,002 INFO: [003_R..][epoch: 19, iter:   4,000, lr:(1.999e-04,)] [eta: 1:14:37, time (data): 0.722 (0.001)] l_pix: 3.4901e-02 
2023-08-19 03:23:55,002 INFO: Saving models and training states.
2023-08-19 03:23:57,034 INFO: Validation Set5
	 # psnr: 27.8306	Best: 27.8306 @ 4000 iter

2023-08-19 03:25:14,080 INFO: [003_R..][epoch: 20, iter:   4,100, lr:(1.999e-04,)] [eta: 1:13:29, time (data): 0.725 (0.001)] l_pix: 2.6970e-02 
2023-08-19 03:26:26,317 INFO: [003_R..][epoch: 20, iter:   4,200, lr:(1.999e-04,)] [eta: 1:12:11, time (data): 0.723 (0.001)] l_pix: 3.3293e-02 
2023-08-19 03:27:42,501 INFO: [003_R..][epoch: 21, iter:   4,300, lr:(1.999e-04,)] [eta: 1:10:58, time (data): 0.720 (0.001)] l_pix: 2.8257e-02 
2023-08-19 03:28:54,614 INFO: [003_R..][epoch: 21, iter:   4,400, lr:(1.998e-04,)] [eta: 1:09:40, time (data): 0.721 (0.001)] l_pix: 2.6487e-02 
2023-08-19 03:30:10,720 INFO: [003_R..][epoch: 22, iter:   4,500, lr:(1.998e-04,)] [eta: 1:08:27, time (data): 0.720 (0.001)] l_pix: 2.7042e-02 
2023-08-19 03:30:10,720 INFO: Saving models and training states.
2023-08-19 03:30:13,037 INFO: Validation Set5
	 # psnr: 28.2142	Best: 28.2142 @ 4500 iter

2023-08-19 03:31:26,043 INFO: [003_R..][epoch: 22, iter:   4,600, lr:(1.998e-04,)] [eta: 1:07:13, time (data): 0.726 (0.001)] l_pix: 2.8519e-02 
2023-08-19 03:32:42,736 INFO: [003_R..][epoch: 23, iter:   4,700, lr:(1.998e-04,)] [eta: 1:06:01, time (data): 0.724 (0.000)] l_pix: 3.7866e-02 
2023-08-19 03:33:54,767 INFO: [003_R..][epoch: 23, iter:   4,800, lr:(1.998e-04,)] [eta: 1:04:43, time (data): 0.722 (0.001)] l_pix: 2.8635e-02 
2023-08-19 03:35:11,540 INFO: [003_R..][epoch: 24, iter:   4,900, lr:(1.998e-04,)] [eta: 1:03:30, time (data): 0.725 (0.001)] l_pix: 3.2962e-02 
2023-08-19 03:36:23,786 INFO: [003_R..][epoch: 24, iter:   5,000, lr:(1.998e-04,)] [eta: 1:02:13, time (data): 0.724 (0.001)] l_pix: 2.8444e-02 
2023-08-19 03:36:23,786 INFO: Saving models and training states.
2023-08-19 03:36:25,928 INFO: Validation Set5
	 # psnr: 28.5440	Best: 28.5440 @ 5000 iter

2023-08-19 03:37:42,874 INFO: [003_R..][epoch: 25, iter:   5,100, lr:(1.998e-04,)] [eta: 1:01:03, time (data): 0.727 (0.000)] l_pix: 3.4408e-02 
2023-08-19 03:38:55,287 INFO: [003_R..][epoch: 25, iter:   5,200, lr:(1.998e-04,)] [eta: 0:59:46, time (data): 0.726 (0.001)] l_pix: 3.5954e-02 
2023-08-19 03:40:11,439 INFO: [003_R..][epoch: 26, iter:   5,300, lr:(1.998e-04,)] [eta: 0:58:32, time (data): 0.720 (0.001)] l_pix: 3.7736e-02 
2023-08-19 03:41:23,585 INFO: [003_R..][epoch: 26, iter:   5,400, lr:(1.998e-04,)] [eta: 0:57:15, time (data): 0.721 (0.001)] l_pix: 2.7714e-02 
2023-08-19 03:42:40,311 INFO: [003_R..][epoch: 27, iter:   5,500, lr:(1.998e-04,)] [eta: 0:56:02, time (data): 0.725 (0.001)] l_pix: 2.7376e-02 
2023-08-19 03:42:40,311 INFO: Saving models and training states.
2023-08-19 03:42:42,345 INFO: Validation Set5
	 # psnr: 28.7856	Best: 28.7856 @ 5500 iter

2023-08-19 03:43:55,155 INFO: [003_R..][epoch: 27, iter:   5,600, lr:(1.998e-04,)] [eta: 0:54:48, time (data): 0.727 (0.001)] l_pix: 2.3489e-02 
2023-08-19 03:45:11,833 INFO: [003_R..][epoch: 28, iter:   5,700, lr:(1.997e-04,)] [eta: 0:53:34, time (data): 0.722 (0.001)] l_pix: 2.7141e-02 
2023-08-19 03:46:24,259 INFO: [003_R..][epoch: 28, iter:   5,800, lr:(1.997e-04,)] [eta: 0:52:18, time (data): 0.723 (0.001)] l_pix: 2.6817e-02 
2023-08-19 03:47:41,095 INFO: [003_R..][epoch: 29, iter:   5,900, lr:(1.997e-04,)] [eta: 0:51:05, time (data): 0.728 (0.001)] l_pix: 2.6153e-02 
2023-08-19 03:48:53,599 INFO: [003_R..][epoch: 29, iter:   6,000, lr:(1.997e-04,)] [eta: 0:49:48, time (data): 0.726 (0.001)] l_pix: 3.1334e-02 
2023-08-19 03:48:53,599 INFO: Saving models and training states.
2023-08-19 03:48:55,663 INFO: Validation Set5
	 # psnr: 28.9662	Best: 28.9662 @ 6000 iter

2023-08-19 03:50:13,772 INFO: [003_R..][epoch: 30, iter:   6,100, lr:(1.997e-04,)] [eta: 0:48:37, time (data): 0.729 (0.001)] l_pix: 2.2072e-02 
2023-08-19 03:51:26,022 INFO: [003_R..][epoch: 30, iter:   6,200, lr:(1.997e-04,)] [eta: 0:47:21, time (data): 0.725 (0.001)] l_pix: 3.0928e-02 
2023-08-19 03:52:42,266 INFO: [003_R..][epoch: 31, iter:   6,300, lr:(1.997e-04,)] [eta: 0:46:07, time (data): 0.719 (0.001)] l_pix: 3.2154e-02 
2023-08-19 03:53:54,273 INFO: [003_R..][epoch: 31, iter:   6,400, lr:(1.997e-04,)] [eta: 0:44:50, time (data): 0.720 (0.001)] l_pix: 3.0540e-02 
2023-08-19 03:55:10,485 INFO: [003_R..][epoch: 32, iter:   6,500, lr:(1.997e-04,)] [eta: 0:43:36, time (data): 0.720 (0.002)] l_pix: 2.0055e-02 
2023-08-19 03:55:10,485 INFO: Saving models and training states.
2023-08-19 03:55:12,517 INFO: Validation Set5
	 # psnr: 29.0800	Best: 29.0800 @ 6500 iter

2023-08-19 03:56:25,087 INFO: [003_R..][epoch: 32, iter:   6,600, lr:(1.997e-04,)] [eta: 0:42:21, time (data): 0.723 (0.001)] l_pix: 2.3124e-02 
2023-08-19 03:57:41,331 INFO: [003_R..][epoch: 33, iter:   6,700, lr:(1.996e-04,)] [eta: 0:41:07, time (data): 0.721 (0.001)] l_pix: 2.4584e-02 
2023-08-19 03:58:53,524 INFO: [003_R..][epoch: 33, iter:   6,800, lr:(1.996e-04,)] [eta: 0:39:51, time (data): 0.722 (0.001)] l_pix: 2.6176e-02 
2023-08-19 04:00:09,804 INFO: [003_R..][epoch: 34, iter:   6,900, lr:(1.996e-04,)] [eta: 0:38:37, time (data): 0.720 (0.000)] l_pix: 2.6867e-02 
2023-08-19 04:01:21,824 INFO: [003_R..][epoch: 34, iter:   7,000, lr:(1.996e-04,)] [eta: 0:37:21, time (data): 0.720 (0.001)] l_pix: 2.9886e-02 
2023-08-19 04:01:21,824 INFO: Saving models and training states.
2023-08-19 04:01:23,763 INFO: Validation Set5
	 # psnr: 29.1552	Best: 29.1552 @ 7000 iter

2023-08-19 04:02:40,405 INFO: [003_R..][epoch: 35, iter:   7,100, lr:(1.996e-04,)] [eta: 0:36:08, time (data): 0.722 (0.001)] l_pix: 2.7027e-02 
2023-08-19 04:03:52,832 INFO: [003_R..][epoch: 35, iter:   7,200, lr:(1.996e-04,)] [eta: 0:34:52, time (data): 0.724 (0.001)] l_pix: 3.0649e-02 
2023-08-19 04:05:09,233 INFO: [003_R..][epoch: 36, iter:   7,300, lr:(1.996e-04,)] [eta: 0:33:38, time (data): 0.719 (0.001)] l_pix: 2.8441e-02 
2023-08-19 04:06:21,266 INFO: [003_R..][epoch: 36, iter:   7,400, lr:(1.996e-04,)] [eta: 0:32:22, time (data): 0.720 (0.001)] l_pix: 3.6163e-02 
2023-08-19 04:07:37,525 INFO: [003_R..][epoch: 37, iter:   7,500, lr:(1.996e-04,)] [eta: 0:31:08, time (data): 0.720 (0.001)] l_pix: 2.9354e-02 
2023-08-19 04:07:37,525 INFO: Saving models and training states.
2023-08-19 04:07:39,449 INFO: Validation Set5
	 # psnr: 29.2116	Best: 29.2116 @ 7500 iter

2023-08-19 04:08:52,220 INFO: [003_R..][epoch: 37, iter:   7,600, lr:(1.995e-04,)] [eta: 0:29:53, time (data): 0.724 (0.001)] l_pix: 2.4522e-02 
2023-08-19 04:10:08,790 INFO: [003_R..][epoch: 38, iter:   7,700, lr:(1.995e-04,)] [eta: 0:28:39, time (data): 0.726 (0.002)] l_pix: 2.9668e-02 
2023-08-19 04:11:20,752 INFO: [003_R..][epoch: 38, iter:   7,800, lr:(1.995e-04,)] [eta: 0:27:24, time (data): 0.722 (0.001)] l_pix: 2.9681e-02 
2023-08-19 04:12:37,276 INFO: [003_R..][epoch: 39, iter:   7,900, lr:(1.995e-04,)] [eta: 0:26:09, time (data): 0.722 (0.001)] l_pix: 2.7458e-02 
2023-08-19 04:13:49,205 INFO: [003_R..][epoch: 39, iter:   8,000, lr:(1.995e-04,)] [eta: 0:24:54, time (data): 0.720 (0.001)] l_pix: 2.7766e-02 
2023-08-19 04:13:49,205 INFO: Saving models and training states.
2023-08-19 04:13:51,223 INFO: Validation Set5
	 # psnr: 29.2319	Best: 29.2319 @ 8000 iter

2023-08-19 04:15:08,593 INFO: [003_R..][epoch: 40, iter:   8,100, lr:(1.995e-04,)] [eta: 0:23:40, time (data): 0.726 (0.002)] l_pix: 2.6724e-02 
2023-08-19 04:16:20,926 INFO: [003_R..][epoch: 40, iter:   8,200, lr:(1.995e-04,)] [eta: 0:22:25, time (data): 0.724 (0.002)] l_pix: 3.1160e-02 
2023-08-19 04:17:37,590 INFO: [003_R..][epoch: 41, iter:   8,300, lr:(1.995e-04,)] [eta: 0:21:10, time (data): 0.727 (0.001)] l_pix: 2.6122e-02 
2023-08-19 04:18:49,917 INFO: [003_R..][epoch: 41, iter:   8,400, lr:(1.994e-04,)] [eta: 0:19:55, time (data): 0.724 (0.001)] l_pix: 2.8323e-02 
2023-08-19 04:20:06,501 INFO: [003_R..][epoch: 42, iter:   8,500, lr:(1.994e-04,)] [eta: 0:18:41, time (data): 0.722 (0.001)] l_pix: 3.2034e-02 
2023-08-19 04:20:06,501 INFO: Saving models and training states.
2023-08-19 04:20:08,456 INFO: Validation Set5
	 # psnr: 29.2537	Best: 29.2537 @ 8500 iter

2023-08-19 04:21:21,294 INFO: [003_R..][epoch: 42, iter:   8,600, lr:(1.994e-04,)] [eta: 0:17:26, time (data): 0.726 (0.001)] l_pix: 2.5296e-02 
2023-08-19 04:22:37,677 INFO: [003_R..][epoch: 43, iter:   8,700, lr:(1.994e-04,)] [eta: 0:16:11, time (data): 0.721 (0.001)] l_pix: 2.7342e-02 
2023-08-19 04:23:49,886 INFO: [003_R..][epoch: 43, iter:   8,800, lr:(1.994e-04,)] [eta: 0:14:56, time (data): 0.722 (0.001)] l_pix: 2.8783e-02 
2023-08-19 04:25:06,526 INFO: [003_R..][epoch: 44, iter:   8,900, lr:(1.994e-04,)] [eta: 0:13:42, time (data): 0.724 (0.000)] l_pix: 2.0478e-02 
2023-08-19 04:26:18,787 INFO: [003_R..][epoch: 44, iter:   9,000, lr:(1.994e-04,)] [eta: 0:12:26, time (data): 0.723 (0.001)] l_pix: 3.3707e-02 
2023-08-19 04:26:18,787 INFO: Saving models and training states.
2023-08-19 04:26:20,742 INFO: Validation Set5
	 # psnr: 29.2746	Best: 29.2746 @ 9000 iter

2023-08-19 04:27:37,531 INFO: [003_R..][epoch: 45, iter:   9,100, lr:(1.993e-04,)] [eta: 0:11:12, time (data): 0.723 (0.002)] l_pix: 2.8329e-02 
2023-08-19 04:28:49,567 INFO: [003_R..][epoch: 45, iter:   9,200, lr:(1.993e-04,)] [eta: 0:09:57, time (data): 0.721 (0.001)] l_pix: 2.3999e-02 
2023-08-19 04:30:05,793 INFO: [003_R..][epoch: 46, iter:   9,300, lr:(1.993e-04,)] [eta: 0:08:42, time (data): 0.720 (0.000)] l_pix: 2.2436e-02 
2023-08-19 04:31:18,203 INFO: [003_R..][epoch: 46, iter:   9,400, lr:(1.993e-04,)] [eta: 0:07:27, time (data): 0.723 (0.001)] l_pix: 2.7323e-02 
2023-08-19 04:32:34,774 INFO: [003_R..][epoch: 47, iter:   9,500, lr:(1.993e-04,)] [eta: 0:06:13, time (data): 0.724 (0.001)] l_pix: 2.7726e-02 
2023-08-19 04:32:34,774 INFO: Saving models and training states.
2023-08-19 04:32:36,775 INFO: Validation Set5
	 # psnr: 29.2805	Best: 29.2805 @ 9500 iter

2023-08-19 04:33:49,826 INFO: [003_R..][epoch: 47, iter:   9,600, lr:(1.993e-04,)] [eta: 0:04:58, time (data): 0.728 (0.001)] l_pix: 2.6538e-02 
2023-08-19 04:35:05,866 INFO: [003_R..][epoch: 48, iter:   9,700, lr:(1.993e-04,)] [eta: 0:03:43, time (data): 0.718 (0.002)] l_pix: 3.0733e-02 
2023-08-19 04:36:18,060 INFO: [003_R..][epoch: 48, iter:   9,800, lr:(1.992e-04,)] [eta: 0:02:28, time (data): 0.721 (0.002)] l_pix: 2.7710e-02 
2023-08-19 04:37:35,084 INFO: [003_R..][epoch: 49, iter:   9,900, lr:(1.992e-04,)] [eta: 0:01:14, time (data): 0.723 (0.001)] l_pix: 2.7268e-02 
2023-08-19 04:38:47,155 INFO: [003_R..][epoch: 49, iter:  10,000, lr:(1.992e-04,)] [eta: 0:00:00, time (data): 0.721 (0.001)] l_pix: 2.5171e-02 
2023-08-19 04:38:47,155 INFO: Saving models and training states.
2023-08-19 04:38:49,141 INFO: Validation Set5
	 # psnr: 29.2833	Best: 29.2833 @ 10000 iter

2023-08-19 04:38:53,112 INFO: End of training. Time consumed: 2:04:57
2023-08-19 04:38:53,128 INFO: Save the latest model.
2023-08-19 04:38:55,285 INFO: Validation Set5
	 # psnr: 29.2833	Best: 29.2833 @ 10001 iter

